// Generated by CoffeeScript 1.6.1
(function() {
  var NEW_COMMENT_BUTTONS_ENABLED, addButtons, enableCommentButtons, initTargets, newCommentForm;

  NEW_COMMENT_BUTTONS_ENABLED = true;

  newCommentForm = $('.js-new-comment-form');

  initTargets = function() {
    this.actions = newCommentForm.find('.form-actions');
    this.buttonsArea = this.actions[0];
    this.closeButton = this.actions.find('.js-comment-and-button')[0];
    this.commentButton = this.actions.find('.primary')[0];
    return this.commentField = newCommentForm.find('textarea')[0];
  };

  addButtons = function(div) {
    var tip;
    $(this.buttonsArea).prepend(div);
    tip = $(this.buttonsArea).find('.tip').clone();
    $(this.buttonsArea).find('.tip').remove();
    return $(this.buttonsArea).append(tip.css('clear', 'both'));
  };

  enableCommentButtons = function() {
    var comment, createButton, insertButtons, loadData, observer,
      _this = this;
    initTargets();
    observer = new WebKitMutationObserver(function(mutations) {
      return mutations.forEach(function(mutation) {
        initTargets();
        if ($(this.buttonsArea).has(this.buttonsContainer).length === 0) {
          return addButtons(this.buttonsContainer);
        }
      });
    });
    observer.observe(this.actions[0], {
      childList: true
    });
    comment = function(event) {
      var button;
      event.preventDefault();
      if (_this.buttons && (button = _this.buttons[event.data.id])) {
        _this.commentField.value += button.text;
        if (button.closable) {
          _this.closeButton.click();
        } else {
          _this.commentButton.click();
        }
        return $(_this.commentField).val('');
      }
    };
    createButton = function(id, title, text, closable) {
      var btn;
      if (closable == null) {
        closable = false;
      }
      btn = $.parseHTML("<a href='#' id='" + id + "'>" + title + "</a>");
      $(btn).addClass("button");
      $(btn).css({
        margin: '0px 5px 5px 0px'
      });
      $(btn).on("click", {
        id: $(btn).attr('id')
      }, comment);
      return btn;
    };
    insertButtons = function(buttons) {
      var button, id;
      if (buttons == null) {
        buttons = {};
      }
      this.buttons = buttons;
      this.buttonsContainer = document.createElement('div');
      $(this.buttonsContainer).addClass("ac-new-comment-buttons");
      this.buttonsContainer.setAttribute('style', 'float: left; text-align: left; margin-bottom: 10px;');
      for (id in buttons) {
        button = buttons[id];
        $(this.buttonsContainer).append(createButton(id, button.title, button.text, button.closable));
      }
      return addButtons(this.buttonsContainer);
    };
    loadData = function() {
      return chrome.storage.sync.get('assistocat.newCommentButtons', function(data) {
        return insertButtons(data["assistocat.newCommentButtons"]);
      });
    };
    return loadData();
  };

  if (newCommentForm && NEW_COMMENT_BUTTONS_ENABLED) {
    enableCommentButtons(newCommentForm);
  }

}).call(this);
